syntax = "proto3";
package sports;

option go_package = "/sports";

import "google/protobuf/timestamp.proto";

service Sports {
	// ListSports will return a collection of sport events
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {}
	// GetSport will return a single sport event matching the requested id
  rpc GetEvent(GetEventRequest) returns (GetEventResponse) {}
}

/* Requests/Responses */

//RPC: ListEvents

//Request to ListEvents call
message ListEventsRequest {
  ListEventsRequestFilter filter = 1;
  string order_by = 2;
}

// Response to ListEvents call.
message ListEventsResponse {
  repeated Event events = 1;
}

// Filter for listing sport events
message ListEventsRequestFilter {
  string sport = 1;
  string team = 2;
  string status = 3;
}


//RPC: GetSport

//Request to GetEvent call
message GetEventRequest {
  int64 id = 1;
}

// Response to GetSport call.
message GetEventResponse {
  Event event = 1;
}


/* Resources */

// A sport event resource.
message Event {
  // ID represents a unique identifier for the event.
  int64 id = 1;
  // Name of the team playing on home grounds.
  string home_team = 2;
  // Name of the visitng team.
  string away_team = 3;
  // Name of the sport being played.
  string sport = 4;
  // City where the event is being held.
  string location = 5;
  // Capacity of venue the event is being held.
  int64 capacity = 6;
  // AdvertisedStartTime is the time the event is advertised to run.
  google.protobuf.Timestamp advertised_start_time = 7;
  // ExpectedEndTime is the time the event is expected to end with no overtime.
  google.protobuf.Timestamp expected_end_time = 8;
  // Status determines if a sport is open, in progress, or closed based on start and end times
  string status = 9;
}

